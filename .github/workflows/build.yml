name: Build Firmware

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Create default config
      run: |
        mkdir -p data
        cat > data/config.json << 'EOF'
        {
          "wifi": {
            "ssid": "DEFAULT_SSID",
            "password": "DEFAULT_PASSWORD"
          },
          "server": {
            "url": "http://example.com/image.jpg"
          },
          "weather": {
            "latitude": "47.6062",
            "longitude": "-122.3321",
            "city": "Seattle",
            "units": "fahrenheit"
          },
          "update": {
            "refreshMs": 86400000
          },
          "display": {
            "width": 1200,
            "sidebarWidthPct": 20
          },
          "hardware": {
            "wakeButtonPin": 36
          }
        }
        EOF

    - name: Build firmware
      run: pio run --environment esp32

    - name: Create firmware package
      run: |
        mkdir -p firmware
        cp .pio/build/esp32/firmware.bin firmware/inkplate-image-display.bin
        cp .pio/build/esp32/partitions.bin firmware/ 2>/dev/null || true
        cp .pio/build/esp32/bootloader.bin firmware/ 2>/dev/null || true

        # Create flash script
        cat > firmware/flash.sh << 'EOF'
        #!/bin/bash
        # Flash script for Inkplate Image Display
        # Usage: ./flash.sh [PORT]

        PORT=${1:-/dev/ttyUSB0}

        echo "Flashing Inkplate Image Display firmware..."
        echo "Port: $PORT"

        if command -v esptool.py &> /dev/null; then
            esptool.py --chip esp32 --port $PORT --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin
        elif command -v esptool &> /dev/null; then
            esptool --chip esp32 --port $PORT --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin
        else
            echo "Error: esptool not found. Please install esptool:"
            echo "pip install esptool"
            exit 1
        fi

        echo "Flashing complete!"
        EOF

        chmod +x firmware/flash.sh

        # Create Windows batch file
        cat > firmware/flash.bat << 'EOF'
        @echo off
        REM Flash script for Inkplate Image Display (Windows)
        REM Usage: flash.bat [COM_PORT]

        set PORT=%1
        if "%PORT%"=="" set PORT=COM3

        echo Flashing Inkplate Image Display firmware...
        echo Port: %PORT%

        esptool.py --chip esp32 --port %PORT% --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin

        if %ERRORLEVEL% neq 0 (
            echo Error: esptool not found. Please install esptool:
            echo pip install esptool
            pause
            exit /b 1
        )

        echo Flashing complete!
        pause
        EOF

        # Copy setup script to firmware package
        cp scripts/setup-config.py firmware/

        # Create filesystem upload script
        cat > firmware/upload-config.py << 'EOF'
        #!/usr/bin/env python3
        """
        Upload config.json to Inkplate device filesystem
        """
        import os
        import sys
        import json
        import tempfile
        import subprocess
        from pathlib import Path

        def create_spiffs_image(config_file, output_file, size_kb=1536):
            """Create SPIFFS image with config.json"""
            try:
                # Create temporary directory structure
                with tempfile.TemporaryDirectory() as temp_dir:
                    # Copy config.json to temp directory
                    temp_config = os.path.join(temp_dir, 'config.json')
                    with open(config_file, 'r') as src, open(temp_config, 'w') as dst:
                        dst.write(src.read())

                    # Create SPIFFS image using mkspiffs (if available)
                    cmd = [
                        'mkspiffs',
                        '-c', temp_dir,
                        '-b', '4096',
                        '-p', '256',
                        '-s', str(size_kb * 1024),
                        output_file
                    ]

                    result = subprocess.run(cmd, capture_output=True, text=True)
                    if result.returncode != 0:
                        print(f"Error creating SPIFFS image: {result.stderr}")
                        return False

                    return True
            except Exception as e:
                print(f"Error: {e}")
                return False

        def upload_spiffs(port, spiffs_file):
            """Upload SPIFFS image to device"""
            try:
                cmd = [
                    'esptool.py',
                    '--chip', 'esp32',
                    '--port', port,
                    '--baud', '460800',
                    'write_flash',
                    '-z',
                    '0x290000',  # SPIFFS partition offset
                    spiffs_file
                ]

                result = subprocess.run(cmd)
                return result.returncode == 0
            except Exception as e:
                print(f"Error uploading: {e}")
                return False

        def main():
            if len(sys.argv) < 2:
                print("Usage: python upload-config.py <config.json> [port]")
                print("Example: python upload-config.py config.json /dev/ttyUSB0")
                sys.exit(1)

            config_file = sys.argv[1]
            port = sys.argv[2] if len(sys.argv) > 2 else '/dev/ttyUSB0'

            if not os.path.exists(config_file):
                print(f"Error: Config file '{config_file}' not found")
                sys.exit(1)

            # Validate JSON
            try:
                with open(config_file, 'r') as f:
                    json.load(f)
            except json.JSONDecodeError as e:
                print(f"Error: Invalid JSON in config file: {e}")
                sys.exit(1)

            print(f"Uploading {config_file} to {port}...")

            # Try direct esptool approach first (simpler but may not work)
            print("Attempting direct upload...")
            try:
                cmd = [
                    'esptool.py',
                    '--chip', 'esp32',
                    '--port', port,
                    '--baud', '460800',
                    'write_flash',
                    '0x290000',
                    config_file
                ]
                result = subprocess.run(cmd)
                if result.returncode == 0:
                    print("Upload successful!")
                    return
            except:
                pass

            print("Direct upload failed. You'll need to use PlatformIO:")
            print("1. Install PlatformIO: pip install platformio")
            print("2. Clone project: git clone https://github.com/Sunhick/Inkplate10-client.git")
            print("3. Copy config: cp config.json Inkplate10-client/data/")
            print("4. Upload filesystem: cd Inkplate10-client && pio run --target uploadfs")

        if __name__ == '__main__':
            main()
        EOF

        chmod +x firmware/upload-config.py

        # Create README for firmware package
        cat > firmware/README.md << 'EOF'
        # Inkplate Image Display - Pre-built Firmware

        This package contains pre-built firmware for the Inkplate Image Display project.

        ## What's Included

        - `inkplate-image-display.bin` - Main firmware binary
        - `bootloader.bin` - ESP32 bootloader
        - `partitions.bin` - Partition table
        - `flash.sh` - Linux/macOS flash script
        - `flash.bat` - Windows flash script
        - `setup-config.py` - Configuration setup script
        - `upload-config.py` - Configuration upload script

        ## Quick Setup (Recommended)

        1. **Install dependencies:**
           ```bash
           pip install esptool pyserial
           ```

        2. **Create your configuration:**
           ```bash
           python setup-config.py
           ```
           This will create a `config.json` file with your WiFi credentials, image URL, and weather settings.

        3. **Flash firmware:**
           ```bash
           # Linux/macOS
           ./flash.sh [port]

           # Windows
           flash.bat [COM_port]
           ```

        4. **Upload configuration to device:**
           ```bash
           # Upload your config.json to the device
           python upload-config.py config.json [port]

           # Example:
           python upload-config.py config.json /dev/ttyUSB0
           ```

        ## Manual Configuration

        If you prefer to create the configuration manually, create a `config.json` file:

        ```json
        {
          "wifi": {
            "ssid": "YOUR_WIFI_SSID",
            "password": "YOUR_WIFI_PASSWORD"
          },
          "server": {
            "url": "http://example.com/your-image.jpg"
          },
          "weather": {
            "latitude": "47.6062",
            "longitude": "-122.3321",
            "city": "Your City",
            "units": "fahrenheit"
          },
          "update": {
            "refreshMs": 86400000
          }
        }
        ```

        ## Flashing Instructions

        ### Prerequisites

        Install required tools:
        ```bash
        pip install esptool pyserial
        ```

        ### Linux/macOS

        ```bash
        # Make script executable
        chmod +x flash.sh

        # Flash to default port
        ./flash.sh

        # Or specify port
        ./flash.sh /dev/ttyUSB0
        ```

        ### Windows

        ```cmd
        REM Flash to default port (COM3)
        flash.bat

        REM Or specify port
        flash.bat COM5
        ```

        ### Manual Flashing

        ```bash
        esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 460800 write_flash -z \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 inkplate-image-display.bin
        ```

        ## Troubleshooting

        - **Device shows "Config Error"**: Upload your config.json file to the device filesystem
        - **WiFi connection fails**: Check your WiFi credentials in config.json
        - **Image not loading**: Verify the image URL is accessible and points to a JPEG file

        For more help, see the main project repository.
        EOF

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: inkplate-firmware
        path: firmware/
        retention-days: 30

    - name: Release firmware
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          firmware/inkplate-image-display.bin
          firmware/bootloader.bin
          firmware/partitions.bin
          firmware/flash.sh
          firmware/flash.bat
          firmware/README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
