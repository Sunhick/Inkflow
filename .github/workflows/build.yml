name: Build Firmware

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Build firmware
      run: pio run --environment esp32

    - name: Create firmware package
      run: |
        mkdir -p firmware
        cp .pio/build/esp32/firmware.bin firmware/inkplate-image-display.bin
        cp .pio/build/esp32/partitions.bin firmware/ 2>/dev/null || true
        cp .pio/build/esp32/bootloader.bin firmware/ 2>/dev/null || true

        # Create template config.json for users to edit
        cat > firmware/config.json << 'EOF'
        {
          "wifi": {
            "ssid": "YOUR_WIFI_SSID",
            "password": "YOUR_WIFI_PASSWORD"
          },
          "server": {
            "url": "http://example.com/your-image.jpg"
          },
          "weather": {
            "latitude": "47.6062",
            "longitude": "-122.3321",
            "city": "Seattle",
            "units": "fahrenheit"
          },
          "update": {
            "imageRefreshMs": 86400000,
            "timeUpdateMs": 900000,
            "batteryUpdateMs": 900000
          },
          "display": {
            "width": 1200,
            "sidebarWidthPct": 20,
            "familyName": "Family"
          },
          "hardware": {
            "wakeButtonPin": 36
          }
        }
        EOF

        # Create flash script
        cat > firmware/flash.sh << 'EOF'
        #!/bin/bash
        # Flash script for Inkplate Image Display
        # Usage: ./flash.sh [PORT]

        PORT=${1:-/dev/ttyUSB0}

        echo "=== Inkplate Image Display Flash Tool ==="
        echo "Port: $PORT"

        # Check if config.json exists
        if [ ! -f "config.json" ]; then
            echo "ERROR: config.json not found!"
            echo "Please edit the config.json file with your WiFi credentials and settings."
            echo "Example:"
            echo '  {"wifi": {"ssid": "YourWiFi", "password": "YourPassword"}, ...}'
            exit 1
        fi

        # Validate JSON
        if ! python3 -m json.tool config.json > /dev/null 2>&1; then
            echo "ERROR: config.json is not valid JSON!"
            echo "Please check your config.json file for syntax errors."
            exit 1
        fi

        echo "✓ Configuration file validated"

        # Check for required tools
        if ! command -v esptool.py &> /dev/null; then
            echo "ERROR: esptool.py not found. Please install it:"
            echo "pip install esptool"
            exit 1
        fi

        if ! command -v mkspiffs &> /dev/null; then
            echo "ERROR: mkspiffs not found. Please install PlatformIO:"
            echo "pip install platformio"
            echo "This will provide the mkspiffs tool needed to create the filesystem."
            exit 1
        fi

        echo "✓ Required tools found"

        # Create temporary directory for SPIFFS
        TEMP_DIR=$(mktemp -d)
        cp config.json "$TEMP_DIR/"

        echo "Building filesystem image..."
        # Create SPIFFS image
        mkspiffs -c "$TEMP_DIR" -b 4096 -p 256 -s 1441792 spiffs.bin

        if [ $? -ne 0 ]; then
            echo "ERROR: Failed to create filesystem image"
            rm -rf "$TEMP_DIR"
            exit 1
        fi

        echo "✓ Filesystem image created"

        # Clean up temp directory
        rm -rf "$TEMP_DIR"

        echo "Flashing firmware and configuration..."
        esptool.py --chip esp32 --port $PORT --baud 460800 write_flash -z \
            0x1000 bootloader.bin \
            0x8000 partitions.bin \
            0x10000 inkplate-image-display.bin \
            0x290000 spiffs.bin

        if [ $? -eq 0 ]; then
            echo "✓ Flashing complete!"
            echo "Your Inkplate should now boot with your configuration."
            # Clean up generated SPIFFS image
            rm -f spiffs.bin
        else
            echo "ERROR: Flashing failed!"
            exit 1
        fi
        EOF

        chmod +x firmware/flash.sh

        # Create Windows batch file
        cat > firmware/flash.bat << 'EOF'
        @echo off
        REM Flash script for Inkplate Image Display (Windows)
        REM Usage: flash.bat [COM_PORT]

        set PORT=%1
        if "%PORT%"=="" set PORT=COM3

        echo === Inkplate Image Display Flash Tool ===
        echo Port: %PORT%

        REM Check if config.json exists
        if not exist "config.json" (
            echo ERROR: config.json not found!
            echo Please edit the config.json file with your WiFi credentials and settings.
            pause
            exit /b 1
        )

        REM Validate JSON (basic check)
        python -m json.tool config.json >nul 2>&1
        if %ERRORLEVEL% neq 0 (
            echo ERROR: config.json is not valid JSON!
            echo Please check your config.json file for syntax errors.
            pause
            exit /b 1
        )

        echo ✓ Configuration file validated

        REM Check for esptool
        esptool.py --help >nul 2>&1
        if %ERRORLEVEL% neq 0 (
            echo ERROR: esptool.py not found. Please install it:
            echo pip install esptool
            pause
            exit /b 1
        )

        REM Check for mkspiffs
        mkspiffs --help >nul 2>&1
        if %ERRORLEVEL% neq 0 (
            echo ERROR: mkspiffs not found. Please install PlatformIO:
            echo pip install platformio
            pause
            exit /b 1
        )

        echo ✓ Required tools found

        REM Create temporary directory and copy config
        mkdir temp_spiffs 2>nul
        copy config.json temp_spiffs\

        echo Building filesystem image...
        mkspiffs -c temp_spiffs -b 4096 -p 256 -s 1441792 spiffs.bin

        if %ERRORLEVEL% neq 0 (
            echo ERROR: Failed to create filesystem image
            rmdir /s /q temp_spiffs
            pause
            exit /b 1
        )

        echo ✓ Filesystem image created

        REM Clean up temp directory
        rmdir /s /q temp_spiffs

        echo Flashing firmware and configuration...
        esptool.py --chip esp32 --port %PORT% --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin 0x290000 spiffs.bin

        if %ERRORLEVEL% eq 0 (
            echo ✓ Flashing complete!
            echo Your Inkplate should now boot with your configuration.
            del spiffs.bin
        ) else (
            echo ERROR: Flashing failed!
        )

        pause
        EOF

        # Copy setup script to firmware package
        cp scripts/setup-config.py firmware/



        # Create README for firmware package
        cat > firmware/README.md << 'EOF'
        # Inkplate Image Display - Pre-built Firmware

        This package contains pre-built firmware for the Inkplate Image Display project.

        ## What's Included

        - `inkplate-image-display.bin` - Main firmware binary
        - `bootloader.bin` - ESP32 bootloader
        - `partitions.bin` - Partition table
        - `config.json` - Configuration template (EDIT THIS FILE)
        - `flash.sh` - Linux/macOS flash script
        - `flash.bat` - Windows flash script
        - `setup-config.py` - Interactive configuration setup script

        ## Quick Setup

        1. **Install dependencies:**
           ```bash
           pip install esptool platformio
           ```

        2. **Configure your device:**

           **Option A: Interactive setup (recommended)**
           ```bash
           python setup-config.py
           ```

           **Option B: Edit config.json manually**
           ```bash
           # Edit the config.json file with your settings
           nano config.json  # or use any text editor
           ```

        3. **Flash firmware and configuration:**
           ```bash
           # Linux/macOS
           ./flash.sh [port]

           # Windows
           flash.bat [COM_port]
           ```

        The flash script will automatically:
        - Validate your configuration
        - Build the filesystem with your config.json
        - Flash both firmware and configuration to your device

        ## Manual Configuration

        If you prefer to create the configuration manually, create a `config.json` file:

        ```json
        {
          "wifi": {
            "ssid": "YOUR_WIFI_SSID",
            "password": "YOUR_WIFI_PASSWORD"
          },
          "server": {
            "url": "http://example.com/your-image.jpg"
          },
          "weather": {
            "latitude": "47.6062",
            "longitude": "-122.3321",
            "city": "Your City",
            "units": "fahrenheit"
          },
          "update": {
            "imageRefreshMs": 86400000,
            "timeUpdateMs": 900000,
            "batteryUpdateMs": 900000
          }
        }
        ```

        ## Flashing Instructions

        ### Prerequisites

        Install required tools:
        ```bash
        pip install esptool platformio
        ```

        ### Linux/macOS

        ```bash
        # Make script executable
        chmod +x flash.sh

        # Flash to default port
        ./flash.sh

        # Or specify port
        ./flash.sh /dev/ttyUSB0
        ```

        ### Windows

        ```cmd
        REM Flash to default port (COM3)
        flash.bat

        REM Or specify port
        flash.bat COM5
        ```

        ### Manual Flashing

        **Note**: Manual flashing requires you to build the SPIFFS filesystem separately.
        Use the provided flash scripts for automatic filesystem creation.

        ## Configuration

        Edit the `config.json` file with your settings:

        ```json
        {
          "wifi": {
            "ssid": "YOUR_WIFI_SSID",
            "password": "YOUR_WIFI_PASSWORD"
          },
          "server": {
            "url": "http://example.com/your-image.jpg"
          },
          "weather": {
            "latitude": "47.6062",
            "longitude": "-122.3321",
            "city": "Your City",
            "units": "fahrenheit"
          },
          "update": {
            "imageRefreshMs": 86400000,
            "timeUpdateMs": 900000,
            "batteryUpdateMs": 900000
          }
        }
        ```

        ## Troubleshooting

        - **"config.json not found"**: Make sure you're running the flash script from the firmware directory
        - **"Invalid JSON"**: Check your config.json syntax using `python -m json.tool config.json`
        - **"mkspiffs not found"**: Install PlatformIO: `pip install platformio`
        - **WiFi connection fails**: Double-check your WiFi credentials in config.json
        - **Image not loading**: Verify the image URL is accessible and points to a JPEG file

        For more help, see the main project repository.
        EOF

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: inkplate-firmware
        path: firmware/
        retention-days: 30

    - name: Release firmware
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          firmware/inkplate-image-display.bin
          firmware/bootloader.bin
          firmware/partitions.bin
          firmware/flash.sh
          firmware/flash.bat
          firmware/README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
