name: Build Firmware

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Copy config template
      run: cp src/config/Config.h.template src/config/Config.h

    - name: Build firmware
      run: pio run --environment esp32

    - name: Create firmware package
      run: |
        mkdir -p firmware
        cp .pio/build/esp32/firmware.bin firmware/inkplate-image-display.bin
        cp .pio/build/esp32/partitions.bin firmware/ 2>/dev/null || true
        cp .pio/build/esp32/bootloader.bin firmware/ 2>/dev/null || true

        # Create flash script
        cat > firmware/flash.sh << 'EOF'
        #!/bin/bash
        # Flash script for Inkplate Image Display
        # Usage: ./flash.sh [PORT]

        PORT=${1:-/dev/ttyUSB0}

        echo "Flashing Inkplate Image Display firmware..."
        echo "Port: $PORT"

        if command -v esptool.py &> /dev/null; then
            esptool.py --chip esp32 --port $PORT --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin
        elif command -v esptool &> /dev/null; then
            esptool --chip esp32 --port $PORT --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin
        else
            echo "Error: esptool not found. Please install esptool:"
            echo "pip install esptool"
            exit 1
        fi

        echo "Flashing complete!"
        EOF

        chmod +x firmware/flash.sh

        # Create Windows batch file
        cat > firmware/flash.bat << 'EOF'
        @echo off
        REM Flash script for Inkplate Image Display (Windows)
        REM Usage: flash.bat [COM_PORT]

        set PORT=%1
        if "%PORT%"=="" set PORT=COM3

        echo Flashing Inkplate Image Display firmware...
        echo Port: %PORT%

        esptool.py --chip esp32 --port %PORT% --baud 460800 write_flash -z 0x1000 bootloader.bin 0x8000 partitions.bin 0x10000 inkplate-image-display.bin

        if %ERRORLEVEL% neq 0 (
            echo Error: esptool not found. Please install esptool:
            echo pip install esptool
            pause
            exit /b 1
        )

        echo Flashing complete!
        pause
        EOF

        # Create README for firmware package
        cat > firmware/README.md << 'EOF'
        # Inkplate Image Display - Pre-built Firmware

        This package contains pre-built firmware for the Inkplate Image Display project.

        ## What's Included

        - `inkplate-image-display.bin` - Main firmware binary
        - `bootloader.bin` - ESP32 bootloader
        - `partitions.bin` - Partition table
        - `flash.sh` - Linux/macOS flash script
        - `flash.bat` - Windows flash script

        ## Before Flashing

        **IMPORTANT**: You must configure the firmware before use!

        1. Copy `Config.h.template` to `Config.h` in the source code
        2. Edit `Config.h` with your WiFi credentials and image URL
        3. Rebuild the firmware with your configuration

        This pre-built firmware uses default/template values and will not work without proper configuration.

        ## Flashing Instructions

        ### Prerequisites

        Install esptool:
        ```bash
        pip install esptool
        ```

        ### Linux/macOS

        ```bash
        # Make script executable
        chmod +x flash.sh

        # Flash to default port
        ./flash.sh

        # Or specify port
        ./flash.sh /dev/ttyUSB0
        ```

        ### Windows

        ```cmd
        REM Flash to default port (COM3)
        flash.bat

        REM Or specify port
        flash.bat COM5
        ```

        ### Manual Flashing

        ```bash
        esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 460800 write_flash -z \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 inkplate-image-display.bin
        ```

        ## Configuration

        After flashing, you'll need to configure the device with your settings:

        1. WiFi credentials
        2. Image server URL
        3. Weather location (optional)

        See the main project README for configuration instructions.
        EOF

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: inkplate-firmware
        path: firmware/
        retention-days: 30

    - name: Release firmware
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          firmware/inkplate-image-display.bin
          firmware/bootloader.bin
          firmware/partitions.bin
          firmware/flash.sh
          firmware/flash.bat
          firmware/README.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
